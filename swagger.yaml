openapi: 3.0.0
info:
  title: Simple Inventory API
  description: This is a simple API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
# Added by API Auto Mocking Plugin
- description: SwaggerHub API Auto Mocking
  url: https://virtserver.swaggerhub.com/MatteoLunardon/TRENTunOAPIs_la_vendetta/1.0.0
- url: https://virtserver.swaggerhub.com/JOAOPROGRAMMING/TRENTunO/1.0.0
  description: TRENTunO API Auto Mocking
tags:
- name: admins
  description: Secured Admin-only calls
- name: clients
  description: Operations available to regular clients
paths:
  /client/parks:
    get:
      tags:
      - clients
      summary: searches parks
      description: |
        By passing in the appropriate options, you can search for all
        available parks in the system |
      operationId: searchPark
      parameters:
      - name: searchString
        in: query
        description: pass an optional search string for looking up inventory
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: skip
        in: query
        description: number of records to skip for pagination
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          format: int32
      - name: limit
        in: query
        description: maximum number of records to return
        required: false
        style: form
        explode: true
        schema:
          maximum: 50
          minimum: 0
          type: integer
          format: int32
      responses:
        "200":
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ParkItem'
        "400":
          description: bad input parameter
  /client/logIn:
    get:
      tags:
      - clients
      summary: log in
      description: |
        By passing email and password, if you have an account, you can log in into the site |
      operationId: clientLogIn
      parameters:
      - name: email
        in: query
        description: user's email that he used to register
        style: form
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: user's password
        style: form
        required: true
        schema:
          type: string
      responses:
        "200" : 
          description: you logged in 
  /client/signUp :
    post:
        tags:
        - clients
        summary:  register an account
        description: |
          By passing in the appropriate parameters an user can create a personal 
          account |
        operationId: clientSignUp
        parameters: 
        - name: email
          in: body
          required: true
          schema:
            type: string
        - name: name
          in: body
          required: true
          schema:
            type: string
        - name: surname
          in: body
          required: true
          schema:
            type: string
        - name: password
          in: body
          required: true
          schema:
            type: string
        responses:
          "200" : 
            description: account crated
          "400" :
            description: unvalid input
          "500" :
            description: account already exists
  /client/getpark:
      get:
        tags:
        - clients
        summary: get specific park
        description: |
          By passing a park's id you get all the park's information |
        operationId: getpark
        parameters:
          - name: parkId
            in: query
            required: true
            schema:
              type: string
        responses:
          "200" :
           description: park fouded
           content:
            application/json:
              schema: 
                $ref: '#/components/schemas/ParkItem'
  /client/addReview:
      post:
        tags: 
        - clients
        summary: add a Review 
        description: |
         By passing a text that describe yours opinion and a vote between 1 and 5 you can add a review of a specific park |
        operationId: addRev
        parameters: 
          - name: userId
            in: body
            required: false
            schema:
              type: string
          - name: parkId
            in: body
            required: false
            schema:
              type: string
          - name: text
            in: body
            required: false
            schema:
              type: string
          - name: vote
            in: body
            required: true
            schema:
              type: integer
  
        responses:
          "200" :
            description: item added
          "400" :
            description: invalid input
          "409" :
            description: item alredy exists
  /client/removeReview:
      delete:
        tags: 
        - clients
        summary: delete a Review
        description: |
          By pressing a button the user can delete his own review |
        operationId: delRev
        parameters: 
          - name: reviewId
            in: body
            required: true
            schema:
              type: integer
        responses:
          "200" :
            description: item removed
          "500" :
            description: internal server error
  /client/sendPermissionRequest:
      post:
        tags: 
        - clients
        summary: send a permission request
        description: |
          By passing all the paramters a request to get the permission to publishing events will be send |
        operationId: sendReq
        parameters: 
        - name: userId
          in: body
          required: true
          schema:
            type: string
        - name: text
          in: body
          required: true
          schema:
            type: string
        - name: document
          in: body
          required: true
          schema:
            type: string # we are saving the url poiting to the image in a local server
        responses: 
          "200": 
            description: permission request sent
          "400":
            description: invalid input
          "409": 
            description: already sent
  /client/addEvent:
      post:
        tags:
        - clients
        summary: add Event
        description: |
          by passing the required paramters an evnet will be added ( only after an operator approve it) |
        operationId: addEvent
        parameters: 
          - name: parkid
            in: body
            required: true
            schema:
              type: string
          - name: userId
            in: body
            required: true
            schema:
              type: string # It's an Object id ( in the database )
          - name: name
            in: body
            required: true
            schema:
              type: string
          - name: description
            in: body
            required: true
            schema:
              type: string
          - name: date
            in: body
            required: true
            schema:
              type: string
        responses:
          "200" :
            description: event added
          "400" : 
            description: invalid input
  /client/updateProfile:
      put:
        tags: 
        - clients
        summary: update Profile
        description: |
         chage some account info |
        parameters: 
          - name: userId
            in: body
            required: true
            schema:
              type: string # It's an Object id ( in the database )
          - name: desciption
            in: body
            required: false
            schema:
              type: string
          - name: name
            in: body
            required: false
            schema:
              type: string
          - name: surname
            in: body
            required: false
            schema:
              type: string
        responses:
          "200" :
            description: info updated
  /clients/addReport:
    put:
      tags:
        - clients 
      description: |
        add a report |
      parameters: 
        - name: parkId
          in: body
          required: false
          schema:
            type: string
        - name: description
          in: body
          required: false
          schema:
            type: string
      resposes:
        "200":
          description: "report created"
  /admins/addpark:
    post:
      tags:
      - admins
      summary: adds an inventory item
      description: Adds an item to the system
      operationId: addInventory
      parameters: 
      - name: parkName
        in: body
        description: park's name
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: coordX
        in: body
        description: park's x position on the map
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: coordY
        in: body
        description: park's Y position on the map 
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: description
        in: body
        description: park's generic description
        required: false
        style : form
        explode: true
        schema:
          type: string
      - name: features
        in: body
        description: features
        required: true
        schema: 
          type: array
            content:
              $ref: '#/components/schemas/Feature'
      requestBody:
        description: Inventory item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryItem'
      responses:
        "201":
          description: item created
        "400":
          description: "invalid input, object invalid"
        "409":
          description: an existing item already exists
  /admins/eventsRequests:
    get:
      tags: 
      - admins
      summary: get all events
      description: |
        return a list of all the events that need to be accepted |
      operationId: eventRequests
      responses:
       "200":
          description: all events returned
          content:
            application/json:
              schema: 
                type: array
                items:  
                  $ref: '#/components/schemas/EventItem'
  /admins/requests:
     get:
      tags: 
      - admins
      summary: get all permmison requests
      description: |
        return a list of all the requests of permission  |
      operationId: permissionRequests
      responses:
       "200":
          description: all permission returned
          content:
            application/json:
              schema: 
                type: array
                items:  
                  $ref: '#/components/schemas/RequestItem'
  /admins/addEvent:
      post:
        tags:
          - admins
        summary: add an Event to the Databse
        description: | 
          admin accept the useer's event |
        operationId: addEvent
        parameters: 
      - name: eventName
        in: query
        description: event name
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: data
        in: query
        description: event's data
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: description
        in: query
        description: event description
        required: false
        style : form
        explode: true
        schema:
          type: string
      - name: parkId
        in : query
        description: where the event take place
        required: false
        style: form
        schema:
          type: string
      - name: userId
        in: query
        description: user id 
        required: false
        style: form
        schema:
          type: string
        responses:
          "200":
              description: event added successfully
          "400":
            description: "invalid input, object invalid"
          "409":
            description: an existing item already exists
  /admins/removeRequest:
    delete:
      tags:
        - admins
      description: |
        reqeust denied |
      operationId: removeRequest
      parameters:
        - name: requestId
          in: query
          schema:
            type: string
      responses:
        "200":
            description: "request deleted"
  /admins/removeEventRequest:
    delete:
      tags:
        - admins
      description: |
        event denied |
      operationId: removeEventRequest
      parameters:
        - name: eventRequestId
          in: query
          schema:
            type: string
      responses:
        "200":
            description: "event request deleted"
  /admins/removeReport:
    delete:
      tags:
        - admins
      description: |
        report read |
      operationId: removeReport
      parameters:
        - name: reportId
          in: query
          schema:
            type: string
      responses:
        "200":
            description: "report deleted"
  /admins/permissionGranted:
    put:
      tags:
        -admins
      description: |
        allow a user to publish event |
      operationId: permissionGranted
      parameters:
        - name: userId
          in: query
          schema: 
            type: string
      responses:
        "200":
            description: "permission Granted"
components:
  schemas:
    ParkItem:
      type: object
      properties:
        name:
          type: string
          example: Albere
        id: 
          type: integer
        position:
          type: string
        description:
          type: string
    EventItem:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        date:
          type: string
    RequestItem:
      type: object
      properties:
        account:
          type: string
        document:
          type: string
        description:
          type: string
    Feature:
      enum:
        - child
        - old
        - playGround
        - benches
        - fountains
        - sport
        - dogfield